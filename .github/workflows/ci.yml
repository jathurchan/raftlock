name: CI

on:
  push:
    branches: [main]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'proto/**'
  pull_request:
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'proto/**'
  workflow_dispatch: # Allows the workflow to be run manually

jobs:
  lint:
    name:  Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: |
            --timeout=5m

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint # This job will only run if the 'lint' job succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Verify dependencies
        run: go mod verify

      - name: Run unit tests
        run: go test -v -race ./...

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: unit-test # This job will only run if 'unit-test' succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Run tests with coverage
        run: |
          go test -race -coverprofile=coverage.tmp.out -covermode=atomic ./...
          # Exclude generated protobuf files, test utilities, and examples from the final report
          grep -vE '\.pb\.go:|/testutil/|/examples/' coverage.tmp.out > coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          fail_ci_if_error: true
          verbose: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-test # This job will only run if 'unit-test' succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Install Protobuf Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install Go Protobuf Plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Generate protobuf files
        run: |
          protoc --proto_path=. \
                 --go_out=. --go_opt=paths=source_relative \
                 --go-grpc_out=. --go-grpc_opt=paths=source_relative \
                 $(find . -name '*.proto')

      - name: Tidy dependencies after codegen
        run: go mod tidy

      - name: Run integration tests
        run: go test -v -race -tags=integration ./raft -run=TestRaftIntegration
