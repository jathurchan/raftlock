name: Test Raft

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:  # Allow manual workflow runs

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # For accurate diff on PRs
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Install protoc and Go plugins
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          export PATH="$PATH:$(go env GOPATH)/bin"
      
      - name: Generate protobuf files
        run: |
          export PATH="$PATH:$(go env GOPATH)/bin"
          protoc --go_out=. --go-grpc_out=. proto/*.proto
      
      # - name: Run linting
      #   uses: golangci/golangci-lint-action@v4
      #   with:
      #     version: latest
      #     args: |
      #       --timeout=5m
      #       --out-format=colored-line-number
      #       --exclude-dirs=proto
      
      - name: Run tests with coverage (excluding testutil)
        run: |
          go test -v ./raft -race -coverprofile=coverage.out -covermode=atomic | tee test-output.txt
        
      - name: ‚úÖ Show test results and coverage %
        run: |
          echo "### ‚úÖ Test Results:"
          grep -E '^(=== RUN|--- (PASS|FAIL))' test-output.txt \
            | sed -E 's/=== RUN +/Running: /; s/--- PASS: /‚úÖ Passed: /; s/--- FAIL: /‚ùå Failed: /'

          echo ""
          echo "### üìä Total Coverage:"
          go tool cover -func=coverage.out | grep total

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.out
          flags: unittests
          name: codecov-${{ matrix.go-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
